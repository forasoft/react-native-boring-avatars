{"version":3,"sources":["utilities.js"],"names":["getNumber","name","charactersArray","Array","from","charactersCodesSum","forEach","charactersArrayItem","charCodeAt","getModulus","num","max","getDigit","number","ntn","Math","floor","pow","getBoolean","getAngle","x","y","atan2","PI","getUnit","range","index","value","getRandomColor","colors","getContrast","hexcolor","slice","r","parseInt","substr","g","b","yiq"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAIC,IAAD,IAAU;AACjC,QAAMC,eAAe,GAAGD,IAAI,GAAGE,KAAK,CAACC,IAAN,CAAWH,IAAX,CAAH,GAAsB,EAAlD;AACA,MAAII,kBAAkB,GAAG,CAAzB;AAEAH,EAAAA,eAAe,CAACI,OAAhB,CAAyBC,mBAAD,IAAyB;AAC/C,WAAQF,kBAAkB,IAAIE,mBAAmB,CAACC,UAApB,CAA+B,CAA/B,CAA9B;AACD,GAFD;AAIA,SAAOH,kBAAP;AACD,CATM;AAWP,OAAO,MAAMI,UAAU,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AACtC,SAAOD,GAAG,GAAGC,GAAb;AACD,CAFM;AAIP,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AACvC,SAAOC,IAAI,CAACC,KAAL,CAAYH,MAAM,GAAGE,IAAI,CAACE,GAAL,CAAS,EAAT,EAAaH,GAAb,CAAV,GAA+B,EAA1C,CAAP;AACD,CAFM;AAIP,OAAO,MAAMI,UAAU,GAAG,CAACL,MAAD,EAASC,GAAT,KAAiB;AACzC,SAAO,EAAEF,QAAQ,CAACC,MAAD,EAASC,GAAT,CAAR,GAAwB,CAA1B,CAAP;AACD,CAFM;AAIP,OAAO,MAAMK,QAAQ,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAChC,SAAQN,IAAI,CAACO,KAAL,CAAWD,CAAX,EAAcD,CAAd,IAAmB,GAApB,GAA2BL,IAAI,CAACQ,EAAvC;AACD,CAFM;AAIP,OAAO,MAAMC,OAAO,GAAG,CAACX,MAAD,EAASY,KAAT,EAAgBC,KAAhB,KAA0B;AAC/C,MAAIC,KAAK,GAAGd,MAAM,GAAGY,KAArB;;AAEA,MAAIC,KAAK,IAAId,QAAQ,CAACC,MAAD,EAASa,KAAT,CAAR,GAA0B,CAA1B,KAAgC,CAA7C,EAAgD;AAC9C,WAAO,CAACC,KAAR;AACD,GAFD,MAEO,OAAOA,KAAP;AACR,CANM;AAQP,OAAO,MAAMC,cAAc,GAAG,CAACf,MAAD,EAASgB,MAAT,EAAiBJ,KAAjB,KAA2B;AACvD,SAAOI,MAAM,CAAChB,MAAM,GAAGY,KAAV,CAAb;AACD,CAFM;AAIP,OAAO,MAAMK,WAAW,GAAIC,QAAD,IAAc;AACvC;AACA,MAAIA,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkB,CAAlB,MAAyB,GAA7B,EAAkC;AAChCD,IAAAA,QAAQ,GAAGA,QAAQ,CAACC,KAAT,CAAe,CAAf,CAAX;AACD,GAJsC,CAMvC;;;AACA,MAAIC,CAAC,GAAGC,QAAQ,CAACH,QAAQ,CAACI,MAAT,CAAgB,CAAhB,EAAmB,CAAnB,CAAD,EAAwB,EAAxB,CAAhB;AACA,MAAIC,CAAC,GAAGF,QAAQ,CAACH,QAAQ,CAACI,MAAT,CAAgB,CAAhB,EAAmB,CAAnB,CAAD,EAAwB,EAAxB,CAAhB;AACA,MAAIE,CAAC,GAAGH,QAAQ,CAACH,QAAQ,CAACI,MAAT,CAAgB,CAAhB,EAAmB,CAAnB,CAAD,EAAwB,EAAxB,CAAhB,CATuC,CAWvC;;AACA,MAAIG,GAAG,GAAG,CAACL,CAAC,GAAG,GAAJ,GAAUG,CAAC,GAAG,GAAd,GAAoBC,CAAC,GAAG,GAAzB,IAAgC,IAA1C,CAZuC,CAcvC;;AACA,SAAOC,GAAG,IAAI,GAAP,GAAa,OAAb,GAAuB,OAA9B;AACD,CAhBM","sourcesContent":["export const getNumber = (name) => {\n  const charactersArray = name ? Array.from(name) : [];\n  let charactersCodesSum = 0;\n\n  charactersArray.forEach((charactersArrayItem) => {\n    return (charactersCodesSum += charactersArrayItem.charCodeAt(0));\n  });\n\n  return charactersCodesSum;\n};\n\nexport const getModulus = (num, max) => {\n  return num % max;\n};\n\nexport const getDigit = (number, ntn) => {\n  return Math.floor((number / Math.pow(10, ntn)) % 10);\n};\n\nexport const getBoolean = (number, ntn) => {\n  return !(getDigit(number, ntn) % 2);\n};\n\nexport const getAngle = (x, y) => {\n  return (Math.atan2(y, x) * 180) / Math.PI;\n};\n\nexport const getUnit = (number, range, index) => {\n  let value = number % range;\n\n  if (index && getDigit(number, index) % 2 === 0) {\n    return -value;\n  } else return value;\n};\n\nexport const getRandomColor = (number, colors, range) => {\n  return colors[number % range];\n};\n\nexport const getContrast = (hexcolor) => {\n  // If a leading # is provided, remove it\n  if (hexcolor.slice(0, 1) === '#') {\n    hexcolor = hexcolor.slice(1);\n  }\n\n  // Convert to RGB value\n  var r = parseInt(hexcolor.substr(0, 2), 16);\n  var g = parseInt(hexcolor.substr(2, 2), 16);\n  var b = parseInt(hexcolor.substr(4, 2), 16);\n\n  // Get YIQ ratio\n  var yiq = (r * 299 + g * 587 + b * 114) / 1000;\n\n  // Check contrast\n  return yiq >= 128 ? 'black' : 'white';\n};\n"]}