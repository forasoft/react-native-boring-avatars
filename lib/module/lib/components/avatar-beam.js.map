{"version":3,"sources":["avatar-beam.js"],"names":["React","getNumber","getUnit","getBoolean","getRandomColor","getContrast","Svg","Mask","Rect","G","Path","SIZE","generateData","name","colors","numFromName","range","length","wrapperColor","preTranslateX","wrapperTranslateX","preTranslateY","wrapperTranslateY","data","faceColor","backgroundColor","wrapperRotate","wrapperScale","isMouthOpen","isCircle","eyeSpread","mouthSpread","faceRotate","faceTranslateX","faceTranslateY","AvatarBeam","props","size","square","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  getNumber,\n  getUnit,\n  getBoolean,\n  getRandomColor,\n  getContrast,\n} from '../utilities';\nimport Svg, { Mask, Rect, G, Path } from 'react-native-svg';\n\nconst SIZE = 36;\n\nfunction generateData(name, colors) {\n  const numFromName = getNumber(name);\n  const range = colors && colors.length;\n  const wrapperColor = getRandomColor(numFromName, colors, range);\n  const preTranslateX = getUnit(numFromName, 10, 1);\n  const wrapperTranslateX =\n    preTranslateX < 5 ? preTranslateX + SIZE / 9 : preTranslateX;\n  const preTranslateY = getUnit(numFromName, 10, 2);\n  const wrapperTranslateY =\n    preTranslateY < 5 ? preTranslateY + SIZE / 9 : preTranslateY;\n\n  const data = {\n    wrapperColor: wrapperColor,\n    faceColor: getContrast(wrapperColor),\n    backgroundColor: getRandomColor(numFromName + 13, colors, range),\n    wrapperTranslateX: wrapperTranslateX,\n    wrapperTranslateY: wrapperTranslateY,\n    wrapperRotate: getUnit(numFromName, 360),\n    wrapperScale: 1 + getUnit(numFromName, SIZE / 12) / 10,\n    isMouthOpen: getBoolean(numFromName, 2),\n    isCircle: getBoolean(numFromName, 1),\n    eyeSpread: getUnit(numFromName, 5),\n    mouthSpread: getUnit(numFromName, 3),\n    faceRotate: getUnit(numFromName, 10, 3),\n    faceTranslateX:\n      wrapperTranslateX > SIZE / 6\n        ? wrapperTranslateX / 2\n        : getUnit(numFromName, 8, 1),\n    faceTranslateY:\n      wrapperTranslateY > SIZE / 6\n        ? wrapperTranslateY / 2\n        : getUnit(numFromName, 7, 2),\n  };\n\n  return data;\n}\n\nconst AvatarBeam = (props) => {\n  const data = generateData(props.name, props.colors);\n\n  return (\n    <Svg\n      viewBox={'0 0 ' + SIZE + ' ' + SIZE}\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={props.size}\n      height={props.size}\n    >\n      <Mask\n        id=\"mask__beam\"\n        maskUnits=\"userSpaceOnUse\"\n        x={0}\n        y={0}\n        width={SIZE}\n        height={SIZE}\n      >\n        <Rect\n          width={SIZE}\n          height={SIZE}\n          rx={props.square ? undefined : SIZE * 2}\n          fill=\"white\"\n        />\n      </Mask>\n      <G mask=\"url(#mask__beam)\">\n        <Rect width={SIZE} height={SIZE} fill={data.backgroundColor} />\n        <Rect\n          x=\"0\"\n          y=\"0\"\n          width={SIZE}\n          height={SIZE}\n          transform={\n            'translate(' +\n            data.wrapperTranslateX +\n            ' ' +\n            data.wrapperTranslateY +\n            ') rotate(' +\n            data.wrapperRotate +\n            ' ' +\n            SIZE / 2 +\n            ' ' +\n            SIZE / 2 +\n            ') scale(' +\n            data.wrapperScale +\n            ')'\n          }\n          fill={data.wrapperColor}\n          rx={data.isCircle ? SIZE : SIZE / 6}\n        />\n        <G\n          transform={\n            'translate(' +\n            data.faceTranslateX +\n            ' ' +\n            data.faceTranslateY +\n            ') rotate(' +\n            data.faceRotate +\n            ' ' +\n            SIZE / 2 +\n            ' ' +\n            SIZE / 2 +\n            ')'\n          }\n        >\n          {data.isMouthOpen ? (\n            <Path\n              d={'M15 ' + (19 + data.mouthSpread) + 'c2 1 4 1 6 0'}\n              stroke={data.faceColor}\n              fill=\"none\"\n              strokeLinecap=\"round\"\n            />\n          ) : (\n            <Path\n              d={'M13,' + (19 + data.mouthSpread) + ' a1,0.75 0 0,0 10,0'}\n              fill={data.faceColor}\n            />\n          )}\n          <Rect\n            x={14 - data.eyeSpread}\n            y={14}\n            width={1.5}\n            height={2}\n            rx={1}\n            stroke=\"none\"\n            fill={data.faceColor}\n          />\n          <Rect\n            x={20 + data.eyeSpread}\n            y={14}\n            width={1.5}\n            height={2}\n            rx={1}\n            stroke=\"none\"\n            fill={data.faceColor}\n          />\n        </G>\n      </G>\n    </Svg>\n  );\n};\n\nexport default AvatarBeam;\n"]}