{"version":3,"sources":["avatar-bauhaus.js"],"names":["React","getNumber","getUnit","getRandomColor","getBoolean","Svg","Mask","Rect","G","Circle","Line","ELEMENTS","SIZE","generateColors","name","colors","numFromName","range","length","elementsProperties","Array","from","_","i","color","translateX","translateY","rotate","isSquare","AvatarBauhaus","props","properties","size","square","undefined"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { getNumber, getUnit, getRandomColor, getBoolean } from '../utilities';\nimport Svg, { Mask, Rect, G, Circle, Line } from 'react-native-svg';\n\nconst ELEMENTS = 4;\nconst SIZE = 80;\n\nfunction generateColors(name, colors) {\n  const numFromName = getNumber(name);\n  const range = colors && colors.length;\n\n  const elementsProperties = Array.from({ length: ELEMENTS }, (_, i) => ({\n    color: getRandomColor(numFromName + i, colors, range),\n    translateX: getUnit(numFromName * (i + 1), SIZE / 2 - (i + 17), 1),\n    translateY: getUnit(numFromName * (i + 1), SIZE / 2 - (i + 17), 2),\n    rotate: getUnit(numFromName * (i + 1), 360),\n    isSquare: getBoolean(numFromName, 2),\n  }));\n\n  return elementsProperties;\n}\n\nconst AvatarBauhaus = (props) => {\n  const properties = generateColors(props.name, props.colors);\n\n  return (\n    <Svg\n      viewBox={'0 0 ' + SIZE + ' ' + SIZE}\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={props.size}\n      height={props.size}\n    >\n      <Mask\n        id=\"mask__bauhaus\"\n        maskUnits=\"userSpaceOnUse\"\n        x={0}\n        y={0}\n        width={SIZE}\n        height={SIZE}\n      >\n        <Rect\n          width={SIZE}\n          height={SIZE}\n          rx={props.square ? undefined : SIZE * 2}\n          fill=\"white\"\n        />\n      </Mask>\n      <G mask=\"url(#mask__bauhaus)\">\n        <Rect width={SIZE} height={SIZE} fill={properties[0].color} />\n        <Rect\n          x={(SIZE - 60) / 2}\n          y={(SIZE - 20) / 2}\n          width={SIZE}\n          height={properties[1].isSquare ? SIZE : SIZE / 8}\n          fill={properties[1].color}\n          transform={\n            'translate(' +\n            properties[1].translateX +\n            ' ' +\n            properties[1].translateY +\n            ') rotate(' +\n            properties[1].rotate +\n            ' ' +\n            SIZE / 2 +\n            ' ' +\n            SIZE / 2 +\n            ')'\n          }\n        />\n        <Circle\n          cx={SIZE / 2}\n          cy={SIZE / 2}\n          fill={properties[2].color}\n          r={SIZE / 5}\n          transform={\n            'translate(' +\n            properties[2].translateX +\n            ' ' +\n            properties[2].translateY +\n            ')'\n          }\n        />\n        <Line\n          x1={0}\n          y1={SIZE / 2}\n          x2={SIZE}\n          y2={SIZE / 2}\n          strokeWidth={2}\n          stroke={properties[3].color}\n          transform={\n            'translate(' +\n            properties[3].translateX +\n            ' ' +\n            properties[3].translateY +\n            ') rotate(' +\n            properties[3].rotate +\n            ' ' +\n            SIZE / 2 +\n            ' ' +\n            SIZE / 2 +\n            ')'\n          }\n        />\n      </G>\n    </Svg>\n  );\n};\n\nexport default AvatarBauhaus;\n"]}